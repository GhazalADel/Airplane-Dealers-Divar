// Code generated by swaggo/swag. DO NOT EDIT.

package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "API Support",
            "url": "http://www.swagger.io/support",
            "email": "support@swagger.io"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/ads": {
            "get": {
                "description": "Retrieves ads from database and accept query params.",
        "/users/login": {
            "post": {
                "description": "Login with username and password",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ads"
                ],
                "summary": "List of ads.",
                    "users"
                ],
                "summary": "User login",
                "parameters": [
                    {
                        "description": "Login request body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Ad"
                            }
                        }
                    },
                    "500": {
                        "description": "Could not retrieve ads",
                        "schema": {
                            "type": "string"
                            "$ref": "#/definitions/handlers.UserResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponseRegisterLogin"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponseRegisterLogin"
                        }
                    }
                }
            }
        },
        "/ads/add": {
            "post": {
                "description": "Create new ad by given properties",
        "/users/payment/request": {
            "post": {
                "description": "Zarinpal Payment to add budget to user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ads"
                ],
                "summary": "Create an ad",
                "parameters": [
                    {
                        "description": "Ad details",
                    "payment"
                ],
                "summary": "Add budget request",
                "parameters": [
                    {
                        "description": "Payment request details",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ads.AdRequest"
                            "$ref": "#/definitions/handlers.AmountFee"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ads.AdResponse"
                            "$ref": "#/definitions/handlers.RequestResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/ads.ErrorAddAd"
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/ads.ErrorAddAd"
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/ads/{id}": {
            "get": {
                "description": "Retrieves an ad based on the provided ID",
        "/users/payment/verify": {
            "get": {
                "description": "Verify Zarinpal Payment to add budget to user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ads"
                ],
                "summary": "Get ad by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Ad ID",
                        "name": "id",
                        "in": "query",
                        "required": true
                    "payment"
                ],
                "summary": "Verify budget payment and add budget",
                "parameters": [
                    {
                        "description": "Payment verify details",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.VerifyResponse"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Ad"
                        }
                    },
                    "400": {
                        "description": "Invalid parameter id",
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Could not retrieve ads",
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "ads.AdRequest": {
            "type": "object",
            "properties": {
                "AirplaneModel": {
                    "type": "string"
                },
                "Category": {
                    "type": "string"
                },
                "Description": {
                    "type": "string"
                },
                "ExpertCheck": {
                    "type": "boolean"
                },
                "FlyTime": {
                    "type": "integer"
                },
                "Image": {
                    "type": "string"
                },
                "PlaneAge": {
                    "type": "integer"
                },
                "Price": {
                    "type": "integer"
                },
                "RepairCheck": {
                    "type": "boolean"
                },
                "Subject": {
                    "type": "string"
                }
            }
        },
        "ads.AdResponse": {
            "type": "object",
            "properties": {
                "AirplaneModel": {
                    "type": "string"
                },
                "CategoryID": {
                    "type": "integer"
                },
                "Description": {
                    "type": "string"
                },
                "ExpertCheck": {
                    "type": "boolean"
                },
                "FlyTime": {
                    "type": "integer"
                },
                "ID": {
                    "type": "integer"
                },
                "Image": {
                    "type": "string"
                },
                "PlaneAge": {
                    "type": "integer"
                },
                "Price": {
                    "type": "integer"
                },
                "RepairCheck": {
                    "type": "boolean"
                },
                "Status": {
                    "type": "string"
                },
                "Subject": {
                    "type": "string"
                },
                "UserID": {
                    "type": "integer"
                }
            }
        },
        "ads.ErrorAddAd": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "responsecode": {
                    "type": "integer"
                }
            }
        },
        "models.Ad": {
            "type": "object",
            "properties": {
                "airplaneModel": {
                    "type": "string"
                },
                "category": {
                    "$ref": "#/definitions/models.Category"
                },
                "categoryID": {
                    "type": "integer"
                },
                "description": {
                    "type": "string"
                },
                "expertCheck": {
                    "type": "boolean"
                },
                "flyTime": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "image": {
                    "type": "string"
                },
                "planeAge": {
                    "type": "integer"
                },
                "price": {
                    "type": "integer"
                },
                "repairCheck": {
                    "type": "boolean"
                },
                "status": {
                    "type": "string"
                },
                "subject": {
                    "type": "string"
                },
                "user": {
                    "$ref": "#/definitions/models.User"
                },
                "userID": {
                    "type": "integer"
                }
            }
        },
        "models.Bookmarks": {
            "type": "object",
            "properties": {
                "ads": {
                    "$ref": "#/definitions/models.Ad"
                },
                "adsID": {
                    "type": "integer"
                },
                "user": {
                    "$ref": "#/definitions/models.User"
                },
                "userID": {
                    "type": "integer"
                }
            }
        },
        "models.Category": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "name": {
        },
        "/users/register": {
            "post": {
                "description": "Register a new user with the provided information",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Register a new user",
                "parameters": [
                    {
                        "description": "User registration details",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.UserCreateRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/handlers.UserResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponseRegisterLogin"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponseRegisterLogin"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponseRegisterLogin"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "handlers.AmountFee": {
            "type": "object",
            "properties": {
                "fee": {
                    "type": "integer"
                }
            }
        },
        "handlers.ErrorResponseRegisterLogin": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "responsecode": {
                    "type": "integer"
                }
            }
        },
        "handlers.LoginRequest": {
            "type": "object",
            "properties": {
                "password": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "handlers.RequestResponse": {
            "type": "object",
            "properties": {
                "payment_url": {
                    "type": "string"
                }
            }
        },
        "handlers.UserCreateRequest": {
            "type": "object",
            "properties": {
                "password": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "handlers.UserResponse": {
            "type": "object",
            "properties": {
                "ID": {
                    "type": "integer"
                },
                "IsActive": {
                    "type": "boolean"
                },
                "Password": {
                    "type": "string"
                },
                "Token": {
                    "type": "string"
                },
                "UserID": {
                    "type": "integer"
                },
                "Username": {
                    "type": "string"
                }
            }
        },
        "handlers.VerifyResponse": {
            "type": "object",
            "properties": {
                "Authority": {
                    "type": "string"
                },
                "Status": {
                    "type": "string"
                }
            }
        },

        "models.User": {
            "type": "object",
            "properties": {
                "bookmarks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Bookmarks"
                    }
                },
                "id": {
                    "type": "integer"
                },
                "password": {
                    "type": "string"
                },
                "role": {
                    "type": "integer"
                },
                "username": {

        "models.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "Airplane-Divar",
	Description:      "Quera Airplane-Divar server",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
